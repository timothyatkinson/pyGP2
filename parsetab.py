
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CHAR COLON COMMA EMPTY LPAREN LSQUARE MARK_BLUE MARK_DASHED MARK_GREEN MARK_GREY MARK_RED MID NUMBER RPAREN RSQUARE STRINGgraph : LSQUARE nodelist MID edgelist RSQUARE\n                       | LSQUARE nodelist MID RSQUARE\n                       | LSQUARE MID RSQUAREnodelist : node nodelist\n                      | nodeedgelist : edge edgelist\n                      | edgenode : LPAREN NUMBER COMMA label mark RPAREN\n                       | LPAREN NUMBER COMMA label RPARENedge : LPAREN NUMBER COMMA NUMBER COMMA NUMBER COMMA label mark RPAREN\n                       | LPAREN NUMBER COMMA NUMBER COMMA NUMBER COMMA label RPARENlabel : atom COLON label\n                      | atom\n                      | EMPTYatom : NUMBER\n                      | STRING\n                      | CHAR mark : MARK_RED\n                      | MARK_GREEN\n                      | MARK_BLUE\n                      | MARK_GREY\n                      | MARK_DASHED'
    
_lr_action_items = {'LSQUARE':([0,],[2,]),'$end':([1,8,12,16,],[0,-3,-2,-1,]),'MID':([2,3,5,9,27,35,],[4,7,-5,-4,-9,-8,]),'LPAREN':([2,5,7,13,27,35,42,43,],[6,6,14,14,-9,-8,-11,-10,]),'RSQUARE':([4,7,11,13,17,42,43,],[8,12,16,-7,-6,-11,-10,]),'NUMBER':([6,14,15,25,33,37,39,],[10,18,19,34,19,38,19,]),'COMMA':([10,18,34,38,],[15,25,37,39,]),'EMPTY':([15,33,39,],[22,22,22,]),'STRING':([15,33,39,],[23,23,23,]),'CHAR':([15,33,39,],[24,24,24,]),'COLON':([19,21,23,24,],[-15,33,-16,-17,]),'RPAREN':([19,20,21,22,23,24,26,28,29,30,31,32,36,40,41,],[-15,27,-13,-14,-16,-17,35,-18,-19,-20,-21,-22,-12,42,43,]),'MARK_RED':([19,20,21,22,23,24,36,40,],[-15,28,-13,-14,-16,-17,-12,28,]),'MARK_GREEN':([19,20,21,22,23,24,36,40,],[-15,29,-13,-14,-16,-17,-12,29,]),'MARK_BLUE':([19,20,21,22,23,24,36,40,],[-15,30,-13,-14,-16,-17,-12,30,]),'MARK_GREY':([19,20,21,22,23,24,36,40,],[-15,31,-13,-14,-16,-17,-12,31,]),'MARK_DASHED':([19,20,21,22,23,24,36,40,],[-15,32,-13,-14,-16,-17,-12,32,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'graph':([0,],[1,]),'nodelist':([2,5,],[3,9,]),'node':([2,5,],[5,5,]),'edgelist':([7,13,],[11,17,]),'edge':([7,13,],[13,13,]),'label':([15,33,39,],[20,36,40,]),'atom':([15,33,39,],[21,21,21,]),'mark':([20,40,],[26,41,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> graph","S'",1,None,None,None),
  ('graph -> LSQUARE nodelist MID edgelist RSQUARE','graph',5,'p_graph','graph_parser.py',94),
  ('graph -> LSQUARE nodelist MID RSQUARE','graph',4,'p_graph','graph_parser.py',95),
  ('graph -> LSQUARE MID RSQUARE','graph',3,'p_graph','graph_parser.py',96),
  ('nodelist -> node nodelist','nodelist',2,'p_nodelist','graph_parser.py',108),
  ('nodelist -> node','nodelist',1,'p_nodelist','graph_parser.py',109),
  ('edgelist -> edge edgelist','edgelist',2,'p_edgelist','graph_parser.py',117),
  ('edgelist -> edge','edgelist',1,'p_edgelist','graph_parser.py',118),
  ('node -> LPAREN NUMBER COMMA label mark RPAREN','node',6,'p_node','graph_parser.py',126),
  ('node -> LPAREN NUMBER COMMA label RPAREN','node',5,'p_node','graph_parser.py',127),
  ('edge -> LPAREN NUMBER COMMA NUMBER COMMA NUMBER COMMA label mark RPAREN','edge',10,'p_edge','graph_parser.py',135),
  ('edge -> LPAREN NUMBER COMMA NUMBER COMMA NUMBER COMMA label RPAREN','edge',9,'p_edge','graph_parser.py',136),
  ('label -> atom COLON label','label',3,'p_label','graph_parser.py',145),
  ('label -> atom','label',1,'p_label','graph_parser.py',146),
  ('label -> EMPTY','label',1,'p_label','graph_parser.py',147),
  ('atom -> NUMBER','atom',1,'p_atom','graph_parser.py',158),
  ('atom -> STRING','atom',1,'p_atom','graph_parser.py',159),
  ('atom -> CHAR','atom',1,'p_atom','graph_parser.py',160),
  ('mark -> MARK_RED','mark',1,'p_mark','graph_parser.py',173),
  ('mark -> MARK_GREEN','mark',1,'p_mark','graph_parser.py',174),
  ('mark -> MARK_BLUE','mark',1,'p_mark','graph_parser.py',175),
  ('mark -> MARK_GREY','mark',1,'p_mark','graph_parser.py',176),
  ('mark -> MARK_DASHED','mark',1,'p_mark','graph_parser.py',177),
]
